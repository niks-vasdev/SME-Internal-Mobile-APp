@using Data.Models.Leave
@using SmedaInternalMobile.HttpHelperService.Leave
@using SmedaInternalMobile.HttpHelperService.User
@inject UserService UserService
@inject ILeave Leave
@inject NotificationService NotificationService
@inject DialogService DialogService
@using SmedaInternalMobile.Components.Localization
@using System.Globalization


<RadzenDataGrid AllowColumnResize="true" AllowFiltering="true" PagerHorizontalAlign="@HorizontalAlign.Center" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                FilterPopupRenderMode="PopupRenderMode.OnDemand" AllowPaging="false" PageSize="5" AllowSorting="false"
                Data="@Status" TItem="StatusViewModal"
                Style="max-width: auto%; overflow-x: auto; height: auto; white-space: nowrap;">
    <Columns>

        <RadzenDataGridColumn TItem="StatusViewModal" Property="Role" Filterable="false" Sortable="false" Title=@Localization.Role />
        <RadzenDataGridColumn TItem="StatusViewModal" Property="Status" Filterable="false" Sortable="false" Title=@Localization.Status>
            <Template Context="model">
                @model.Status
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="StatusViewModal" Property="Reason" Filterable="false" Sortable="false" Title=@Localization.Reason Width="auto" />

    </Columns>
</RadzenDataGrid>
@code{

    [Parameter]
    public Guid Id { get; set; }

    public bool isArabic;


    public List<StatusViewModal> Status { get; set; } = new List<StatusViewModal>();

    protected override async Task OnInitializedAsync()
    {
        CultureInfo cultureInfo = Thread.CurrentThread.CurrentCulture;
        if (cultureInfo.IetfLanguageTag == "ar-OM")
        {
            isArabic = true;
        }
        else
        {
            isArabic = false;
        }
   
        StateHasChanged();
    }

    private async Task ShowImage(string uid)
    {

    }


}